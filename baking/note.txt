1. POJO（Plain Old Java Object）
定义：POJO是“Plain Old Java Object”的缩写，即普通的Java对象。
特点：
它是一个普通的Java类，通常只包含属性、对应的getter和setter方法。
没有继承任何特殊类，也没有实现任何特殊接口。
通常用于封装数据，不包含业务逻辑。
用途：
用于封装数据，方便在程序内部传递。
可以作为其他对象的属性，用于构建更复杂的数据结构。
常见于各种框架中，如Spring、Hibernate等，用于数据绑定和数据传输。
2. Entity（实体类）
定义：Entity通常用于表示数据库中的表或实体。
特点：
通常与数据库表一一对应，每个Entity类的实例代表数据库表中的一行数据。
包含属性（字段），这些属性通常与数据库表的列一一对应。
包含getter和setter方法，用于操作属性。
可能包含一些与数据库操作相关的注解（如JPA注解），用于定义表结构、主键、外键等。
用途：
用于与数据库交互，通过ORM框架（如Hibernate）将对象映射到数据库表。
在持久层（如Service层）中使用，用于CRUD操作（增删改查）。
3. DTO（Data Transfer Object）
定义：DTO是“Data Transfer Object”的缩写，即数据传输对象。
特点：
用于封装前端传递过来的数据，或者封装后端需要传递到前端的数据。
通常只包含属性和getter/setter方法，不包含业务逻辑。
可以根据前端的需求定制字段，避免暴露不必要的数据。
用途：
在前端和后端之间传递数据，减少网络传输的数据量。
用于接收前端请求参数，封装用户输入的数据。
用于封装后端返回的数据，提供给前端展示。
4. VO（Value Object）
定义：VO是“Value Object”的缩写，即值对象。
特点：
用于封装后端内部的数据，通常用于展示层（如Controller层）。
包含属性和getter/setter方法，也可以包含一些简单的业务逻辑。
通常用于将多个Entity或DTO组合成一个对象，方便在页面上展示。
用途：
在Controller层中使用，用于封装最终返回给前端的数据。
可以将多个Entity或DTO的数据组合在一起，提供更丰富的数据结构。
用于封装计算后的结果，或者封装复杂的业务逻辑的结果。
<if test="userName!=null">user_name=#{userName},</if>
其中"test"后判断条件不是数据库中的变量名,是实体类的